setwd("../Dropbox/College/3_Third Year/Summer Learning/Learning From Data/")
randDat <- read.csv("hw5Programs/test.csv")
randDat <- read.csv("hw5Programs/test.csv", headers=F)
randDat <- read.csv("hw5Programs/test.csv", header=F)
randDat
randDat <- read.csv("hw5Programs/test.csv", header=F)
randDat
library(ggplot2)
ggplot(dat=randDat, aes(x=V2, y=V3, shape=V4))
ggplot(dat=randDat, aes(x=V2, y=V3, shape=V4)) +
geom_points()
ggplot(dat=randDat, aes(x=V2, y=V3, shape=V4)) +
geom_point()
ggplot(dat=randDat, aes(x=V2, y=V3, shape=as.factor(V4))) +
geom_point()
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
randDat <- read.csv("hw5Programs/test.csv", header=F)
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
read.csv("hw5Programs/testW.csv")
read.csv("hw5Programs/testW.csv", header=F)
read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat <- read.csv("hw5Programs/test.csv", header=F)
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
randDat
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
w
Matrix(randDat)
as.matrix(randDat)
as.matrix(randDat[1:3])
as.matrix(randDat[1:3])*w
w
as.matrix(randDat[1:3])*w
as.matrix(randDat[1:3])*as.matrix(w)
as.matrix(w)
as.matrix(randDat[1:3])
as.matrix(randDat[1:3])*as.matrix(w)
as.matrix(randDat[1:3])*as.matrix(w)
?as.matrix
as.matrix(randDat[1:3])*as.matrix(w, byrow=T)
as.matrix(w, byrow=T)
as.matrix(w, byrow=T, nrow=1)
as.matrix(w, ncol=1)
as.matrix(w, nrow=1)
as.matrix(w, nrow=1)
w
as.matrix(w, nrow=1)
as.matrix(data=w, nrow=1)
as.matrix(w, nrow=1)
as.matrix(w, nrow=1)
matrix(w, nrow=1)
matrix(w, nrow=1)
as.matrix(randDat[1:3])*matrix(w, byrow=T)
as.matrix(randDat[1:3])*as.matrix(w, byrow=T)
as.matrix(randDat[1:3])*as.matrix(w, byrow=T)
as.matrix(randDat[1:3])
randDat[1:3]
randDat
as.matrix(randDat[,1:4])
as.matrix(randDat[,1:4])*as.matrix(w, byrow=T)
as.matrix(randDat[,1:4])*as.matrix(w, byrow=T)
as.matrix(randDat[,1:4])*as.matrix(w, byrow=T)
as.matrix(randDat[,1:4])*matrix(w, byrow=T)
as.matrix(randDat[,1:4])*matrix(w)
w <- matrix(read.csv("hw5Programs/testW.csv", header=F)[,1])
w
dat <- matrix(randDat)
dat
randDat <- read.csv("hw5Programs/test.csv", header=F)
dat <- matrix(randDat)
dat
randDat
randDat[,1:4]
dat <- matrix(randDat[,1:4])
dat
dat <- matrix(randDat[,1:4])
randDat
dat <- matrix(randDat[,1:4])
dat
dat <- as.matrix(randDat[,1:4])
dat
w
dat[,1:3]
dat[,1:3]*w
w
dat[,1:3]*w
dat[,1:3]*w
dat[,1:3]*w
dat[,1:3]*w
dat[,1:3]*w
dat[,1:3]*w
dat[,1:3]*w
dat[,1:3]*w
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
w
as.matrix(randDat[1:3])*w
?apply
apply(as.matrix(randDat[1:3])*w, 1, 0)
apply(as.matrix(randDat[1:3])*w, 1, sum)
?sign
sign(apply(as.matrix(randDat[1:3])*w, 1, sum))
randDat[,4]
w
sign(apply(as.matrix(randDat[1:3])*w, 1, sum))
predicted <- sign(apply(as.matrix(randDat[1:3])*w, 1, sum))
predsign(apply(as.matrix(randDat[1:3])*w, 1, sum))
predicted
(predicted > 0) == (randDat[,4] > 0)
sum((predicted > 0) == (randDat[,4] > 0))
randDat[,4]
w
apply(as.matrix(randDat[1:3])*w, 1, sum)
?Logistic
logisticEval <- function(x) exp(x)/(1+exp(x))
logisticEval
predicted <- logisticEval(apply(as.matrix(randDat[1:3])*w, 1, sum))
predicted
randDat[,4]
randDat
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
library(data.table)
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
randDat
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
randDat
randDat[,pred:=logisticEval(apply(as.matrix(randDat[1:3])*w, 1, sum))]
randDat[,"pred":=logisticEval(apply(as.matrix(randDat[1:3])*w, 1, sum))]
randDat
randDat[,"pred":=NA]
randDat
randDat[,pred:=NA]
randDat
logisticEval(apply(as.matrix(randDat[1:3])*w, 1, sum))
logisticEval(apply(as.matrix(randDat[1:3])*w, 1, sum))
apply(as.matrix(randDat[1:3])*w, 1, sum)
as.matrix(randDat[1:3])*w
as.matrix(randDat[1:3])
as.matrix(randDat[,1:3])
as.matrix(randDat[,1:3, with=F])
randDat[,"pred":=logisticEval(apply(as.matrix(randDat[,1:3, with=F])*w, 1, sum))]
randDat
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])*w, 1, sum)]
randDat[,"pred":=logisticEval(s))]
randDat[,"pred":=logisticEval(s)]
randDat
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])*w, 1, sum)]
randDat[,"pred":=logisticEval(s)]
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])*w, 1, sum)]
randDat[,"pred":=logisticEval(s)]
w
randDat
w
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])*w, 1, sum)]
randDat[,"pred":=logisticEval(s)]
(predicted > 0) == (randDat[,4] > 0)
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])*w, 1, sum)]
randDat[,"pred":=logisticEval(s)]
(predicted > 0) == (randDat[,4] > 0)
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])*w, 1, sum)]
randDat[,"pred":=logisticEval(s)]
(predicted > 0) == (randDat[,4] > 0)
randDat
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat
randDat[pred!=actual]
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])*w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
w
randDat[,1:3, with=F]
randDat[,1:3, with=F]*w
w
help("*")
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])%*%w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
randDat
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])%*%w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])%*%w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])%*%w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
w
setwd("../Dropbox/College/3_Third Year/Summer Learning/Learning From Data/")
library(ggplot2)
library(data.table)
#Num 8 -- Making sure points are linearally separable
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])%*%w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
w
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])%*%w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])%*%w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])%*%w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=apply(as.matrix(randDat[,1:3, with=F])%*%w, 1, sum)]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[pred!=actual]
randDat[, "predCorrect":=pred!=actual]
randDat
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
shape=as.factor(predCorrect))) +
geom_point()
w
randDat[,1:3, with=F])%*%w
randDat[,1:3, with=F]%*%w
as.matrix(randDat[,1:3, with=F])%*%w
randDat[,"s":=as.matrix(randDat[,1:3, with=F])%*%w]
randDat
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=as.matrix(randDat[,1:3, with=F])%*%w]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[, "predCorrect":=pred!=actual]
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
shape=as.factor(predCorrect))) +
geom_point()
randDat
w
library(glm)
?glm
actualModel <- glm(family="binomial", data=randDat, formula=actual ~ x1 + x2)
coef(actualModel)
plot(actualModel)
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
shape=as.factor(predCorrect))) +
geom_point()
summary(actualModel)
randDat
actualModel <- glm(family="binomial", data=randDat, formula=actual ~ x1 + x2)
?glm
actualModel <- glm(family=binomial(), data=randDat, formula=actual ~ x1 + x2)
summary(actualModel)
actualModel <- glm(family=binomial, data=randDat, formula=actual ~ x1 + x2)
summary(actualModel)
w
w
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
w
#Num 8 -- Making sure points are linearally separable
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=as.matrix(randDat[,1:3, with=F])%*%w]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[, "predCorrect":=pred!=actual]
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
shape=as.factor(predCorrect))) +
geom_point()
w
#Num 8 -- Making sure points are linearally separable
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=as.matrix(randDat[,1:3, with=F])%*%w]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, 0)]
randDat[, "predCorrect":=pred!=actual]
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
shape=as.factor(predCorrect))) +
geom_point()
w
randDat[,"pred":=ifelse(prob>0.5, 1, -1)]
randDat[, "predCorrect":=pred!=actual]
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
shape=as.factor(predCorrect))) +
geom_point()
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
size=as.factor(predCorrect))) +
geom_point()
#Num 8 -- Making sure points are linearally separable
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) exp(x)/(1+exp(x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=as.matrix(randDat[,1:3, with=F])%*%w]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, -1)]
randDat[, "predCorrect":=pred!=actual]
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
size=as.factor(predCorrect))) +
geom_point()
w
randDat[predCorrect == FALSE]
randDat[predCorrect == TRUE]
randDat[, "predCorrect":=pred==actual]
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
geom_point()
size=as.factor(predCorrect))) +
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
size=as.factor(predCorrect))) +
geom_point()
randDat[predCorrect == TRUE]
randDat[predCorrect == FALSE]
randDat[,predCorrect]
randDat[predCorrect == F]
randDat[predCorrect == FALSE]
randDat[predCorrect == "FALSE"]
w
?aes
randDat[, "predWrong":=pred!=actual]
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
size=as.factor(predCorrect))) +
geom_point()
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
size=as.factor(predWrong))) +
geom_point()
randDat[predWrong == "FALSE"]
randDat[predWrong == "TRUe"]
randDat[predWrong == "TRUE"]
#Num 8 -- Making sure points are linearally separable
randDat <- data.table(read.csv("hw5Programs/test.csv", header=F))
ggplot(dat=randDat, aes(x=V2, y=V3, col=as.factor(V4))) +
geom_point()
#Num 8 -- Make sure weights trained correctly
logisticEval <- function(x) 1/(1+exp(-x))
setnames(randDat, names(randDat), c("x0", "x1", "x2", "actual", "pred"))
w <- read.csv("hw5Programs/testW.csv", header=F)[,1]
randDat[,"s":=as.matrix(randDat[,1:3, with=F])%*%w]
randDat[,"prob":=logisticEval(s)]
randDat[,"pred":=ifelse(prob>0.5, 1, -1)]
randDat[, "predWrong":=pred!=actual]
ggplot(dat=randDat, aes(x=x1, y=x2, col=as.factor(actual),
size=as.factor(predWrong))) +
geom_point()
randDat[predWrong == "TRUE"]
